
;---------------------------------------------------------------------
;
; Statechart definition for tictactoe
; based on SVM by Thomas Feng, and pystatecharts by vishpat
;
; open issues:
;    action should be a list, should support events directly, should
;      support limits on features
;    events should support parameters
;    transitions should support time as an event (a timed monitor state?)
;    states should be stateful (i.e. count)
;    concurrent states should execute concurrently
;
; startState, endState are reserved keywords for top-most entry/exit states
; State, HierarchicalState, and Concurrent state are reserved keywords for state types
; 
;---------------------------------------------------------------------
[STATECHART]
name = TicTacToe		  

;
; "Debug"        prints debug statement on transition if Action method exists
; "Print"        prints generated code to display
; "GenCode"      generates python code
; "GenCallbacks" generates empty callbacks / overwrites callbacks (be carefull)
; "Intepret"     throws generated code into python executor
; "Limit = 0"    python code may be placed in entry / action list
; "Limit = 1"    events only may be placed in entry / action list
; 
; lists are in the format [<methodname> , <item1>, <item2>, ...]

[OPTIONS]
Debug        = 1
Print        = 0
GenCode      = 1
GenCallbacks = 1
Interpret    = 1
LimitAction  = 0  

[INITIAL]
Python_1 = from threading import Lock 
Python_2 = from pystatecharts.pseudostates import StartState
Python_3 = from pystatecharts.pseudostates import EndState
Python_4 = from pystatecharts.pseudostates import HistoryState
Python_5 = from pystatecharts.states import Statechart
Python_6 = from pystatecharts.states import State
Python_7 = from pystatecharts.states import ConcurrentState
Python_8 = from pystatecharts.states import HierarchicalState  
Python_9 = from pystatecharts.states import Transition 
Python_10 = from pystatecharts.action import Action
Python_11 = from pystatecharts.transition import Event 
Python_12 = from pystatecharts.transition import Guard
Python_13 = from pystatecharts.runtime import RuntimeData
Python_14 = from scbObjects import *
Python_15 =from StatechartThread import *
     

; top states are concurrent-states
; states with leaves are hierarchical-states
; all concurrent states and hierarchical states need a "start"
; states without leaves are plain states

;  the form:
;
;  entry = [ method() event ]
;
; will generate a python method and place the send event inside the method 
;

[STATE_1]         
name = BoardState   
parent = None       
type = ConcurrentState   
entry = None        
do = None           
exit = None         
          
[STATE_2] 
name = InteractionState  
parent = BoardState 
type = HierarchicalState    
entry = None    
do = None
exit = None
 
[STATE_3]
name = PlayState
parent = InteractionState
type = HierarchicalState     
entry = [PlayEntryAction(), init_doneEvent]  
do = None                    
exit = None                  

[STATE_4]
name = WaitInputState1
parent = PlayState        
type = State               
entry = CheckBoardAction() 
do    = None
exit  = None

[STATE_5]
name = ProcessState
parent = PlayState       
type = State                  
entry   = CheckBoardAction()  
do      = MakeMoveAction()      
exit    = None

[STATE_6] 
name = DoneState
parent = InteractionState          
type = State                     
entry   = DoneEntryAction()  
do      = None
exit    = None       

[STATE_7]     
name = OptionState
parent = BoardState        
type = HierarchicalState
entry   = None  
do      = None
exit    = None

[STATE_8]   
name = WaitInputState2
parent = OptionState        
type = State
entry = None  
do    = None
exit  = None
disable = False

[STATE_9] 
name = HelpState
parent = OptionState        
type = State
entry = ShowHelpEntryAction()  
do    = None
exit  = None
disable = False

[EVENTS_1]
base = 1
name = TicTacToeEvent
event_1 = init_doneEvent
event_2 = cell_clickedEvent
event_3 = move_madeEvent
event_4 = show_helpEvent
event_5 = dismiss_helpEvent
event_6 = game_overEvent
event_7 = replayEvent
event_8 = exitEvent
event_9 = queryEvent
event_10 = query_replyEvent

;
; a transition into any hierarchical state (i.e. state with starts)
; will automatically re-start lower states
;

[TRANSITION_1]
start  = start   
end    = BoardState
event  = None
guard  = None
action = startBoardState()


[TRANSITION_2]
start  = BoardState
end    = end    
event  = exitEvent
guard  = GuardTest()
action = ExitAction()   

[TRANSITION_3]
start  = start   
end    = InteractionState
event  = None
guard  = None
action = startInteractionState()

[TRANSITION_4]
start  = start
end    = PlayState    
event  = None
guard  = None
action = startPlayState()


[TRANSITION_5]
start  = PlayState
end    = DoneState    
event  = game_overEvent
guard  = None
action = IntoDoneState()


[TRANSITION_6]
start  = DoneState
;end    = PlayState
end     = WaitInputState1
event  = replayEvent
guard  = None
action = IntoPlayState()


[TRANSITION_6x]
start  = DoneState
end    = InteractionState
event  = replayEvent
guard  = None
action = IntoInteractionState()

[TRANSITION_7]
start  = start
end    = WaitInputState1    
event  = None
guard  = None
action = startWaitInputState1()


[TRANSITION_8]
start  = WaitInputState1
end    = ProcessState 
event  = cell_clickedEvent
guard  = None
action = IntoProcessState()


[TRANSITION_9]
start  = ProcessState 
end    = WaitInputState1 
event  = move_madeEvent
guard  = None
action = IntoWaitInputState1()


[TRANSITION_10]
start  = WaitInputState2
end    = HelpState    
event  = show_helpEvent
guard  = None
action = IntoHelpState()
disable = False

[TRANSITION_11]
start  = HelpState 
end    = WaitInputState2   
Event  = dismiss_helpEvent
Guard  = None
action = None
disable = False

[TRANSITION_12]
start  = HelpState 
end    = HelpState   
Event  = queryEvent
Guard  = None
action = queryResponse1() 
disable = False

[TRANSITION_13]
start  = WaitInputState1
end    = WaitInputState1 
event  = queryEvent
guard  = None
action = queryResponse2()

[TRANSITION_14]
start  = WaitInputState2
end    = WaitInputState2    
event  = queryEvent
guard  = None
action = queryResponse3()
disable = False

[TRANSITION_15]
start  = ProcessState 
end    = ProcessState 
event  = queryEvent
guard  = None
action = queryResponse4()

[TRANSITION_16]
start  = DoneState
end    = DoneState
event  = queryEvent
guard  = None
action = queryResponse5()

[TRANSITION_17]
start  = start
end    = WaitInputState2    
event  = None
guard  = None
action = startWaitInputState2()
disable = False

[TRANSITION_18]
start  = start   
end    = OptionState
event  = None
guard  = None
action = startOptionState()

[TRANSITION_19]
start  = WaitInputState2
end    = DoneState    
event  = game_overEvent
guard  = None
action = IntoDoneState()
disable = True




