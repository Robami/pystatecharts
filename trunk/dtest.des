
;---------------------------------------------------------------------
;
; Statechart definition for dtest - distributed test
; based on SVM by Thomas Feng, and pystatecharts by vishpat
;
; open issues:
;
;
; startState, endState are reserved keywords for top-most entry/exit states
; State, HierarchicalState, and Concurrent state are reserved keywords for state types
; 
;---------------------------------------------------------------------
[STATECHART]
name = dtest		  

;
; "Debug"        prints debug statement on transition if Action method exists
; "Print"        prints generated code to display
; "GenCode"      generates python code
; "GenCallbacks" generates empty callbacks / overwrites callbacks (be carefull)
; "Interpret"     throws generated code into python executor
; "Limit = 0"    python code may be placed in entry / action list
; "Limit = 1"    events only may be placed in entry / action list
; 
; lists are in the format [<methodname> , <item1>, <item2>, ...]

[OPTIONS]
Debug        = 1
Print        = 0
GenCode      = 1
GenCallbacks = 1
Interpret    = 1
LimitAction  = 0  

[INITIAL]
file = init_des.py
Python_1x = from KThread import *  # killable thread
Python_2 = from threading import Lock 
Python_3 = from pystatecharts.pseudostates import StartState
Python_4 = from pystatecharts.pseudostates import EndState
Python_5 = from pystatecharts.pseudostates import HistoryState
Python_6 = from pystatecharts.states import Statechart
Python_7 = from pystatecharts.states import State
Python_8 = from pystatecharts.states import ConcurrentState
Python_9 = from pystatecharts.states import HierarchicalState  
Python_10 = from pystatecharts.states import Transition 
Python_11 = from pystatecharts.action import Action
Python_12 = from pystatecharts.transition import Event 
Python_13 = from pystatecharts.transition import Guard
Python_14 = from pystatecharts.transition import CountingGuard
Python_15 = from pystatecharts.runtime import RuntimeData
Python_16 = sys.path.append('/home/jupiter/rps/rabbitmq/amqplib-0.6.1')
Python_17 = sys.path.append('/home/jupiter/rps/rabbitmq/apps')
Python_18 = import pyrabbitmq as rmq
Python_19 = from scbUtilities import *
     

; top states are concurrent-states
; states with leaves are hierarchical-states
; all concurrent states and hierarchical states need a "start"
; states without leaves are plain states

;  the form:
;
;  entry = [ method() event ]
;
; will generate a python method and place the send event inside the method 
;

[STATE_1]         
name = TopState1   
parent = None       
type = ConcurrentState   
entry = None        
do = None           
exit = None
;
; can only have one top state
; so, for testing prior to separate processes
; second top state becomes hierarchical state
;
[STATE_2]         
name = TopState2   
parent = TopState1       
type = HierarchicalState   
entry = None        
do = None           
exit = None 
disable = False       
          
[STATE_3] 
name = SenderState
;name = None  
parent = TopState1 
type = HierarchicalState    
entry = None    
do = None
exit = None

[STATE_4] 
name = ReceiverState  
parent = TopState2 
type = HierarchicalState    
entry = None    
do = None
exit = None
 
[STATE_5]
name = WaitState1
;name = None
parent = SenderState
;parent = None
type = State     
entry = None 
do = None                    
exit = None 

[STATE_6]
name = WaitState2
parent = ReceiverState
type = State     
entry = None 
do = None                    
exit = None  

[STATE_7]
name = MsgState
parent = SenderState
type = State   
;
; on entering state sends message event as message
;  
entry = [event2port1(), DistribEvents.msgEvent]
;
; then, xlates message to event, sends that
;
;do =    [port2event1(), port2event1]    
do = None
exit =  None 

[STATE_8]
name = ReplyState
parent = ReceiverState
type = State     
entry = None 
do =   [event2port2(),DistribEvents.ackEvent]                    
exit = None                


[EVENTS_1]
name = DistribEvents
base = 1
event_1 = triggerEvent
event_2 = msgEvent
event_3 = ackEvent
event_4 = mDoneEvent
event_5 = rDoneEvent
event_6 = exitEvent1
event_7 = exitEvent2

;
; a transition into any hierarchical state (i.e. state with starts)
; will automatically re-start lower states
;

[TRANSITION_1]
start  = start   
end    = TopState1
event  = None
guard  = None
action = StartAction1()


[TRANSITION_2]
start  = TopState1
end    = end    
event  = DistribEvents.exitEvent1
guard  = None
action = [ExitAction1()]  

[TRANSITION_3]
start  = start   
end    = SenderState
event  = None
guard  = None
action = [startProtocolState1(), pass]


[TRANSITION_4]
start  = start   
end    = ReceiverState
event  = None
guard  = None
action = [startProtocolState2(), pass]

[TRANSITION_5]
start  = start
end    = WaitState1    
event  = None
guard  = None
action = [startWaitState1(), pass]
disable = True

[TRANSITION_6]
start  = start
end    = WaitState2    
event  = None
guard  = None
action = [startWaitState2(), pass]

[TRANSITION_7]
;start  = None
start  = WaitState1
end    = MsgState
;end    = None    
event  = DistribEvents.triggerEvent
guard  = CountingGuard(1,True)
guardx  = None
action = [IntoMsgState(), pass]


[TRANSITION_8]
start  = MsgState
end    = WaitState1
event  = DistribEvents.ackEvent
guard  = None
action = [IntoWaitState1(), DistribEvents.mDoneEvent]

[TRANSITION_9]
start  = WaitState2
end    = ReplyState    
event  = DistribEvents.msgEvent
guard  = None
action = [IntoReplyState(), DistribEvents.ackEvent]

[TRANSITION_10]
start  = ReplyState
end    = WaitState2 
event  = None
guard  = None
action = [IntoWaitState2(), DistribEvents.rDoneEvent]

[TRANSITION_11]
start  = start   
end    = TopState2
event  = None
guard  = None
action = StartAction2

;
; import_name is python, if empty then assumed not used
; channel_id is for the user handle, channel internally has its own id 
; choices for type: 'fanout' for 1:N , 'direct' for 1:1 
; output ports are exchanges, input ports are queues 
; message tags allow filtering of messages within the server
; exchanges and queues correspond to rabbitmq/amqp exchanges and queues
;
[PORT_INIT]
import_name = rmq
host = 'localhost'
userid = 'guest'
password = 'guest'

[PORT_CONFIG_1]
channel_id = 1
exchange = myexchange
type = direct
queue = myqueue
msg_tag = myq.myx
;
; events must match an value of the EVENT section
; exchange, queue must have a matching a value in the PORT_CONFIG section
; event_data is unique and is used as a signal to the event handler to 
; convert the event to a message, or message to an event when the
; event_id and event_data match
;
[PORT_1]
name     = event2port1
type     = output
port     = myexchange
event_id   = DistribEvents.msgEvent


[PORT_2]
name     = port2event1
type     = input
port     = myqueue
event_id   = DistribEvents.msgEvent


[PORT_3]
name     = event2port2
type     = output
port     = myexchange
event_id   = DistribEvents.ackEvent


[PORT_4]
name = port2event2
type = input
port = myqueue
event_id   = DistribEvents.ackEvent


