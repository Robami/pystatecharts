
;---------------------------------------------------------------------
;
; Statechart definition for dtest - distributed test
; based on SVM by Thomas Feng, and pystatecharts by vishpat
;
; open issues:
;    transition guards untested
;    action should be a list, should support events directly, should
;      support limits on features
;    events should support parameters
;    transitions should support time as an event (a timed monitor state?)
;    states should be stateful (i.e. count)
;    concurrent states should execute concurrently
;
; startState, endState are reserved keywords for top-most entry/exit states
; State, HierarchicalState, and Concurrent state are reserved keywords for state types
; 
;---------------------------------------------------------------------
[STATECHART]
name = dtest2		  

;
; "Debug"        prints debug statement on transition if Action method exists
; "Print"        prints generated code to display
; "GenCode"      generates python code
; "GenCallbacks" generates empty callbacks / overwrites callbacks (be carefull)
; "Intepret"     throws generated code into python executor
; "Limit = 0"    python code may be placed in entry / action list
; "Limit = 1"    events only may be placed in entry / action list
; 
; lists are in the format [<methodname> , <item1>, <item2>, ...]

[OPTIONS]
Debug        = 1
Print        = 0
GenCode      = 1
GenCallbacks = 1
Interpret    = 1
LimitAction  = 0  

[INITIAL]
file = 
Python_1 = from threading import Lock 
Python_2 = from pystatecharts.pseudostates import StartState
Python_3 = from pystatecharts.pseudostates import EndState
Python_4 = from pystatecharts.pseudostates import HistoryState
Python_5 = from pystatecharts.states import Statechart
Python_6 = from pystatecharts.states import State
Python_7 = from pystatecharts.states import ConcurrentState
Python_8 = from pystatecharts.states import HierarchicalState  
Python_9 = from pystatecharts.states import Transition 
Python_10 = from pystatecharts.action import Action
Python_11 = from pystatecharts.transition import Event 
Python_12 = from pystatecharts.transition import Guard
Python_13 = from pystatecharts.runtime import RuntimeData
Python_14 = import sys
Python_15 = sys.path.append('/home/jupiter/rps/rabbitmq/amqplib-0.6.1')
Python_16 = sys.path.append('/home/jupiter/rps/rabbitmq/apps')
Python_17 = import pyrabbitmq as rmq
Python_18 = from scbUtilities import *
Python_19 = from scbObjects import *
Python_20 = from StatechartThread import *
     

; top states are concurrent-states
; states with leaves are hierarchical-states
; all concurrent states and hierarchical states need a "start"
; states without leaves are plain states

;  the form:
;
;  entry = [ method() event ]
;
; will generate a python method and place the send event inside the method 
;

[STATE_1]         
name = TopState2   
parent = None       
type = ConcurrentState   
entry = None        
do = None           
exit = None

[STATE_2] 
name = ReceiverState  
parent = TopState2 
type = HierarchicalState    
entry = None    
do = None
exit = None

[STATE_3]
name = WaitState2
parent = ReceiverState
type = State     
entry = None 
do = None                    
exit = None  


[STATE_4]
name = ReplyState
parent = ReceiverState
type = State     
entry = None 
do =   [event2port2(), DistribEvents.ackEvent]                    
exit = [testexit(), pass; return True]                


[EVENTS_1]
base = 1
name = DistribEvents
event_1 = triggerEvent
event_2 = msgEvent
event_3 = ackEvent
event_4 = mDoneEvent
event_5 = rDoneEvent
event_6 = exitEvent1
event_7 = exitEvent2
event_8 = dummyEvent


;
; the next two states are holders
; for when statemachine is split into two
;
[TRANSITION_1]
start  = start   
end    = TopState2
event  = None
guard  = [testGuard(), pass; return True]
action = StartAction2()

[TRANSITION_2]
start  = TopState2
end    = end    
event  = DistribEvents.exitEvent2
guard  = None
action = ExitAction2()    

[TRANSITION_3]
start  = start   
end    = ReceiverState
event  = None
guard  = None
action = startProtocolState2()


[TRANSITION_4]
start  = start
end    = WaitState2    
event  = None
guard  = None
action = startWaitState2()


[TRANSITION_5]
start  = WaitState2
end    = ReplyState    
event  = DistribEvents.msgEvent
guard  = None
action = [IntoReplyState(),print param.event.event_data;param.sendEvent(DistribEvents.ackEvent)]

[TRANSITION_6]
start  = ReplyState
end    = WaitState2 
event  = None
guard  = None
action = [IntoWaitState2(), DistribEvents.rDoneEvent]

;
; import_name is python, if empty then assumed not used
; channel_id is for the user handle, channel internally has its own id 
; choices for type: 'fanout' for 1:N , 'direct' for 1:1 
; output ports are exchanges, input ports are queues 
; message tags allow filtering of messages within the server
; exchanges and queues correspond to rabbitmq/amqp exchanges and queues
;
[PORT_INIT]
import_name = rmq
host = localhost
userid = guest
password = guest

; type = direct, fanout

[PORT_CONFIG_1]
channel_id = 1
exchange = myExchange2
type = direct
queue = myQueue2
msg_tag = myq.myx

[PORT_CONFIG_2]
channel_id = 1
exchange = myExchange1
type = direct
queue = myQueue1
msg_tag = myq.myx

;
; events must match an value of the EVENT section
; exchange and queue must have a matching a value in the PORT_CONFIG section
; if output, on event to portname, the event is sent over the message queue
; if input, there is a thread listener callback named with queue name, 
;   and the message is converted to an event
; event data is optional

;
; if type == output
;   if event_id == 'AnyEvent', send the event as the key, no event data
;     on the other side, on key match, key is converted to ID and sent
;   if event_id == 'JsonData', send the event appended with json of event data
;
; if type == input
;   if event_id == 'AnyEvent', 
;       convert the message to an Event

[PORT_1]
name     = port2event1
type     = input
port     = myQueue2
event_id   = JsonData
;event_id   = AnyEvent
;event_id   = DistribEvents.msgEvent


[PORT_2]
name     = port2event2
type     = input
port     = myQueue2
event_id   = DistribEvents.dummyEvent


[PORT_3]
name     = event2port2
type     = output
port     = myExchange1
event_id   = AnyEvent



